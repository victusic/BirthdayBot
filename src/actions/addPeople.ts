/* eslint-disable operator-linebreak */
import emojiRegex from "emoji-regex";
import { setConversationState } from "..";
import { mainLayout } from "./main";

const GraphemeSplitter = require("grapheme-splitter");
const { ContextMessageUpdate } = require("telegraf");
const db = require("../../configurate/db");

const newPeople: {
  [key: number]: { name: string; date: string; sticker: string };
} = {};

export const addPeopleName = async (ctx: typeof ContextMessageUpdate) => {
  const userId = ctx.from?.id;
  const keyboardButtons = [[{ text: "–û—Ç–º–µ–Ω–∞", callback_data: "–û—Ç–º–µ–Ω–∞" }]];

  await ctx.reply("–û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π—Ç–µ –¥–æ–±–∞–≤–∏–º –Ω–æ–≤–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞.", {
    reply_markup: {
      keyboard: keyboardButtons,
      resize_keyboard: true,
      one_time_keyboard: false,
    },
    parse_mode: "Markdown",
  });
  newPeople[userId] = { name: "", date: "", sticker: "" };
  await ctx.reply("–£–∫–∞–∂–∏—Ç–µ, –∫–∞–∫ –µ–≥–æ –±—É–¥–µ–º –∑–≤–∞—Ç—å:");
};

export const addPeopleDate = async (
  ctx: typeof ContextMessageUpdate,
  userText: string,
) => {
  const userId = ctx.from?.id;
  const keyboardButtons = [[{ text: "–û—Ç–º–µ–Ω–∞", callback_data: "–û—Ç–º–µ–Ω–∞" }]];

  // eslint-disable-next-line no-useless-escape
  const nameRegex = /^[a-zA-Z–∞-—è–ê-–Ø—ë–Å0-9\s,\-.\+:;'"`!#‚Ññ;%?()]{2,64}$/;
  const ValidateName = () => nameRegex.test(userText);
  const isValidName = ValidateName();
  if (isValidName) {
    await ctx.reply(
      "–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –µ–≥–æ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì, –ø—Ä–∏–º–µ—Ä: 24.09.2002):",
      {
        reply_markup: {
          keyboard: keyboardButtons,
          resize_keyboard: true,
          one_time_keyboard: false,
        },
        parse_mode: "Markdown",
      },
    );
    newPeople[userId].name = userText;
    setConversationState(ctx, "addPeopleDate");
  } else {
    await ctx.reply("–ù–µ–∫–æ—Ä—Ä–µ—Ç–Ω–æ —É–∫–∞–∑–∞–Ω–Ω–æ –∏–º—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑");
  }
};

export const addPeopleSticker = async (
  ctx: typeof ContextMessageUpdate,
  userText: string,
) => {
  const userId = ctx.from?.id;
  const keyboardButtons = [[{ text: "–û—Ç–º–µ–Ω–∞", callback_data: "–û—Ç–º–µ–Ω–∞" }]];

  function convertDateFormat() {
    const parts = userText.split(".");
    if (parts.length !== 3) return "";
    return `${parts[2]}-${parts[1]}-${parts[0]}`;
  }

  const ValidateDate = () => {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã
    const dateRegex = /^\d{2}.\d{2}.\d{4}$/;
    if (!dateRegex.test(userText)) return false;
    const [day, month, year] = userText.split(".").map(Number);
    const isValid = !isNaN(day) && !isNaN(month) && !isNaN(year);
    if (!isValid) return false;
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –º–µ—Å—è—Ü–∞ –∏ –¥–Ω—è
    if (month < 1 || month > 12 || day < 1 || day > 31) return false;
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –¥–Ω—è –≤ –º–µ—Å—è—Ü–µ
    const lastDayInMonth = new Date(year, month, 0).getDate();
    if (day > lastDayInMonth) return false;
    const convertedDate = convertDateFormat();
    const date = new Date(convertedDate);
    if (isNaN(date.getTime())) return false;
    const currentDate = new Date();
    const userBirthdate = new Date(year, month - 1, day);
    const ageInYears = currentDate.getFullYear() - userBirthdate.getFullYear();

    return ageInYears <= 100 && userBirthdate <= currentDate;
  };
  const isValidDate = ValidateDate();

  if (isValidDate) {
    await ctx.reply(
      "–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ, –∏ —É–∫–∞–∂–∏—Ç–µ —Å–º–∞–π–ª –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø—Ä–∏–º–µ—Ä: üéä):",
      {
        reply_markup: {
          keyboard: keyboardButtons,
          resize_keyboard: true,
          one_time_keyboard: false,
        },
        parse_mode: "Markdown",
      },
    );
    newPeople[userId].date = userText;
    setConversationState(ctx, "addPeopleSticker");
  } else {
    await ctx.reply("–î–∞—Ç–∞ —É–∫–∞–∑–∞–Ω–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:");
  }
};

export const setAddPeople = async (
  ctx: typeof ContextMessageUpdate,
  userText: string,
) => {
  const userId = ctx.from?.id;
  const keyboardButtons = [
    [{ text: "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data: "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å" }],
    [{ text: "–û—Ç–º–µ–Ω–∞", callback_data: "–û—Ç–º–µ–Ω–∞" }],
  ];
  const ValidateSticker = () => {
    const splitter = new GraphemeSplitter();
    const numberOfCharacters = splitter.splitGraphemes(userText);
    if (numberOfCharacters.length > 1) return false;
    if (userText.length > 32) return false;
    const regex = emojiRegex();
    return regex.test(userText);
  };

  const isValidSticker = ValidateSticker();

  if (isValidSticker) {
    newPeople[userId].sticker = userText;

    const [day, month, year] = newPeople[userId].date.split(".").map(Number);

    const jsDate = new Date(year, month - 1, day);

    const options: Intl.DateTimeFormatOptions = {
      day: "numeric",
      month: "long",
      year: "numeric",
    };

    const formattedDate = new Intl.DateTimeFormat("ru-RU", options).format(
      jsDate,
    );

    await ctx.reply(
      `–í–∞—à –Ω–æ–≤—ã–π —á–µ–ª–æ–≤–µ–∫ ${
        newPeople[userId].name
      }:\n–†–æ–¥–∏–ª—Å—è ${formattedDate.slice(0, -1)}, –∏ –≤—ã –µ–º—É –¥–∞–ª–∏ —Å—Ç–∏–∫–µ—Ä ${
        newPeople[userId].sticker
      }`,
      {
        reply_markup: {
          keyboard: keyboardButtons,
          resize_keyboard: true,
          one_time_keyboard: false,
        },
        parse_mode: "Markdown",
      },
    );
    setConversationState(ctx, "setAddPeople");
  } else {
    await ctx.reply("–£–∫–∞–∂–∏—Ç–µ –∏–º–µ–Ω–Ω–æ —Å—Ç–∏–∫–µ—Ä, –∏ —Ç–æ–ª—å–∫–æ 1:");
  }
};

export const setRecordPeople = async (ctx: typeof ContextMessageUpdate) => {
  const userId = ctx.from?.id;
  const userForChatId = await db.query(
    `SELECT id FROM "User" WHERE chatid = $1`,
    [userId],
  );

  //–¥–ª—è —Ö–æ—Å—Ç–∏–Ω–≥–∞
  const dateParts = newPeople[userId].date.split(".");
  const formattedDate = dateParts[1] + "." + dateParts[0] + "." + dateParts[2];

  const req = await db.query(
    `INSERT INTO "BirthdayPeople" ("name", sticker, birthday, userid) VALUES ($1, $3, $2, $4) RETURNING *`,
    [
      newPeople[userId].name,
      //newPeople[userId].date,
      formattedDate,
      newPeople[userId].sticker,
      userForChatId.rows[0].id,
    ],
  );
  {
    req.rowCount > 0
      ? await ctx.reply("–ß–µ–ª–æ–≤–µ–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω")
      : await ctx.reply(
          "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑",
        );
  }
  setConversationState(ctx, "mainLayout");
  mainLayout(ctx);
};
